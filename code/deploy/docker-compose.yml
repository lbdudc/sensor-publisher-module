version: "3"
services:
  server:
    build:
      context: ../server
      dockerfile: Dockerfile
    container_name: /*%= normalizeKebabCase(data.basicData.name) %*/-server
     /*% if (feature.D_C_Geoserver || feature.D_C_Postgres ) { %*/
    depends_on:
      /*% if (feature.D_C_Geoserver) { %*/
      - geoserver
      /*% } %*/
      /*% if (feature.D_C_Postgres) { %*/
      - postgres
      /*% } %*/
    /*% } %*/
    networks:
      - local
    volumes:
      - "../server/:/app/server/"
    restart: unless-stopped
    ports:
      - '/*%= getExtraConfigFromSpec(data, 'server_deploy_port', '9001') %*/:/*%= getExtraConfigFromSpec(data, 'server_deploy_port', '9001') %*/'
  client:
    build:
      context: ../client
      dockerfile: ../client/deploy/Dockerfile
    container_name: /*%= normalizeKebabCase(data.basicData.name) %*/-client
    networks:
      - local
    restart: unless-stopped
    /*% if (!feature.D_C_Nginx) { %*/
    ports:
      - '1080:80'
    /*% } %*/

  /*% if (feature.D_C_Postgres) { %*/
  postgres:
    container_name: ${PG_CONTAINER_NAME}
    build:
      context: ./postgres
      dockerfile: postgres.dockerfile
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASS: ${POSTGRES_PASSWORD}
      PGDATA: ${PGDATA}
      POSTGRES_MULTIPLE_EXTENSIONS: ${POSTGRES_MULTIPLE_EXTENSIONS}
      POSTGRES_RUN_AS_ROOT: ${POSTGRES_RUN_AS_ROOT}
    volumes:
      - postgres:/data/postgres
    networks:
      - local
    ports:
      - "5432:5432"
    restart: on-failure
    healthcheck:
      test: "PGPASSWORD=${POSTGRES_PASSWORD} pg_isready -h 127.0.0.1 -U ${POSTGRES_USER} -d ${POSTGRES_DB}"

  /*% } %*/
  /*% if (feature.D_C_Geoserver) { %*/
  geoserver:
    container_name: ${GEOSERVER_CONTAINER_NAME}
    image: docker.osgeo.org/geoserver:2.24.1
    environment:
      - CORS_ENABLED=${GEOSERVER_CORS_ENABLED}
      - INSTALL_EXTENSIONS=${GEOSERVER_INSTALL_EXTENSIONS}
      - EXTRA_JAVA_OPTS=${GEOSERVER_EXTRA_JAVA_OPTS}
      - GEOSERVER_CSRF_WHITELIST=${GEOSERVER_CSRF_WHITELIST}
      - GEOSERVER_ADMIN_USER=${GEOSERVER_ADMIN_USER}
      - GEOSERVER_ADMIN_PASSWORD=${GEOSERVER_ADMIN_PASSWORD}
    volumes:
      - /opt/ci/deployments/geoserver/data/:/opt/geoserver_data:Z
      - /opt/ci/deployments/geoserver/additional_libs:/opt/additional_libs:Z # by mounting this we can install libs from host on startup
    networks:
      - local
    ports:
      - "8080:8080"
    restart: unless-stopped

  /*% } %*/
  /*% if (feature.D_C_Nginx) { %*/
  nginx:
    container_name: ${NGINX_CONTAINER_NAME}
    build:
      context: ./nginx
      dockerfile: nginx.dockerfile
    networks:
      - local
    volumes:
      - ../client/:/app/client/
    ports:
      - "80:80"
    /*% if (feature.D_C_Geoserver) { %*/
    depends_on:
      - geoserver
    /*% } %*/
    restart: unless-stopped

  /*% } %*/
 /*% if (feature.D_C_Elastic) { %*/
  elasticsearch:
    container_name: ${EL_CONTAINER_NAME}
    build:
      context: ./elasticsearch
      dockerfile: elasticsearch.dockerfile
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - elasticsearch:/usr/share/elasticsearch/data:z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: ${ES_JAVA_OPTS}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      discovery.type: single-node
    restart: always
    networks:
      - local

  /*% } %*/
  /*% if (feature.D_C_Kibana) { %*/
  # The 'setup' service runs a one-off script which initializes the
  # 'kibana_system' users inside Elasticsearch with the
  # values of the passwords defined in the '.env' file.
  #
  # This task is only performed during the *initial* startup of the stack. On all
  # subsequent runs, the service simply returns immediately, without performing
  # any modification to existing users.
  setup:
    container_name: ${SU_KB_CONTAINER_NAME}
    build:
      context: ./kibana/setup
      dockerfile: setup.dockerfile
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - setup:/state:Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - local
    depends_on:
      - elasticsearch

  kibana:
    container_name: ${KB_CONTAINER_NAME}
    build:
      context: ./kibana
      dockerfile: kibana.dockerfile
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - "5601:5601"
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - local
    depends_on:
      - elasticsearch

  /*% } %*/
  /*% if (feature.D_C_Kafka) { %*/
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:7.2.1
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    restart: always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  /*% } %*/
/*% if (feature.D_C_Postgres || feature.D_C_Elastic || feature.D_C_Kibana) { %*/
volumes:
  /*% if (feature.D_C_Postgres) { %*/
  postgres:
    external: false
  /*% } %*/
  /*% if (feature.D_C_Elastic) { %*/
  elasticsearch:
  /*% if (feature.D_C_Kibana) { %*/
  setup:
  /*% } %*/
  /*% } %*/

/*% } %*/
networks:
  local:
    driver: bridge
