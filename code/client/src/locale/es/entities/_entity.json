###<@ return data.dataModel.entities.map(function(en) {
    return {
        fileName: normalize(en.name) + '.json',
        context: en
  }
}) >###
###< if (data.basicData.languages.find(lang => lang=='es')) { >###
{
  "t_###<= normalize(context.name) >###": {
    "name": "###<= context.name >###",
    "prop": {
        ###< if (context.traceable) { >###"owner": "propietario",###<
      } >###
        ###<= context.properties.map(function(prop) {
          if (prop.class == 'Point') {
            return
              '"' + normalize(prop.name) + '": "' + normalize(prop.name) + '",\n        ' +
              '"' + normalize(prop.name) + 'Custom.x": "' + normalize(prop.name) + ' X",\n        ' +
              '"' + normalize(prop.name) + 'Custom.y": "' + normalize(prop.name) + ' Y"';
        }
          return '"' + normalize(prop.name) + '": "' + normalize(prop.name) + '"';
      }).join(',\n        ') >###
    },
    "messages": {
      "create.success": "###<= normalize(context.name, true) >### creado.",
      "update.success": "###<= normalize(context.name, true) >### actualizado.",
      "delete.success": "###<= normalize(context.name, true) >### eliminado."
    },
    "error": {
      "id-exists": "A new ###<= normalize(context.name) >### cannot already have a ###<= normalize(getEntityProperty(context, 'id').name) >###",
      "id-not-exists": "Updating a ###<= normalize(context.name) >### without a ###<= normalize(getEntityProperty(context, 'id').name) >###",
      "form-errors": "Este ###<= normalize(context.name) >### no se puede guardar debido a errores en el formulario."
    },
    "headers": {
      ###<
      var lists = data.lists.filter(function(list) { return list.entity == context.name});
      var forms = data.forms.filter(function(form) { return form.entity == context.name});
      let theMapViews = [];
      if (feature.SensorViewer) {
        theMapViews = data?.dataWarehouse?.sensors.filter(function(sensor) { return sensor.entity == context.name; });
      }
      >###
      ###< theMapViews.forEach(function(theMapView, index) { >###
      "###<= normalize(theMapView.id) >###": "###<= theMapView.id >###" ###< if (theMapViews.length > index + 1 || forms.length > 0 || lists.length > 0) { >###,###< } >###
      ###< }); >###
      ###< lists.forEach(function(theList, index) { >###
      "###<= normalize(theList.id) >###": "###<= theList.id >###" ###< if (lists.length > index + 1 || forms.length > 0) { >###,###< } >###
      ###< }); >###
      ###< forms.forEach(function(theForm, index) { >###
      "###<= normalize(theForm.id) >###Detail": "###<= theForm.id >### Detail",
      "###<= normalize(theForm.id) >###": "###<= theForm.id >###" ###< if (forms.length > index + 1) { >###,###< } >###
      ###< }); >###
    }
  }
}
###< } >###
