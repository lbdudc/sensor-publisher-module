/*% if (feature.D_GitLabRunner && !feature.D_GLR_Unique) { %*/
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

# The following article has been taken as example to build this file:
# https://www.digitalocean.com/community/tutorials/how-to-set-up-a-continuous-deployment-pipeline-with-gitlab-ci-cd-on-ubuntu-18-04#step-4-setting-up-an-ssh-key

# NECESSARY ENVIRONMENT VARIABLES
# - SERVER_IP : the IP of the server where the product is going to be deployed
# - SERVER_USER : the user of the server where the product is going to be deployed
# - SSH_PRIVATE_KEY : follow the instructions in the article cited before to know what insert here

stages:          # List of stages for jobs, and their order of execution
  - dump
  - deploy
  - log

before_script:
  - sed -i 's/stable\/updates/stable-security\/updates/' /etc/apt/sources.list
  - apt update
  - apt install git -y

dump_to_dev:
  stage: dump
  image: "kroniak/ssh-client"
  before_script: []
  script:
    - chmod og= $SSH_PRIVATE_KEY
    - apk update && apk add openssh-client
    # 0 - stop server container
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop /*%= data.basicData.name.toLowerCase() %*/-server || echo Container has not been initialized yet"
    # 1 - run refres_dev_db script
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "export PGPASSWORD='$DB_USER_PASSWORD' && psql -h localhost -U /*%= getDatabaseConfigFromSpec(data, 'username', 'postgres') %*/ -f /opt/ci/deployments//*%= data.basicData.name.toLowerCase() %*//server/refresh-dev-db.sql"
    # 2 - move to deploy folder and execute docker-compose for the server
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cd /opt/ci/deployments//*%= data.basicData.name.toLowerCase() %*//deploy && docker-compose up -d server"
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: manual
      allow_failure: true # Mark as non blocking to follow next jobs
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_TASK_NAME == "dump-db"'
      when: always
    - when: never

deploy_prod:
  stage: deploy
  environment:
    name: production
    on_stop: stop_prod
  image: "kroniak/ssh-client"
  before_script: []
  script:
    - chmod og= $SSH_PRIVATE_KEY
    - apk update && apk add openssh-client
    # 0 - stop server container
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop /*%= data.basicData.name.toLowerCase() %*/-server || echo Container has not been initialized yet"
    # 1 - move to deploy folder, stop server and pull changes from main
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cd /opt/ci/deployments//*%= data.basicData.name.toLowerCase() %*//deploy && git checkout -- . && git checkout main && git pull"
    # 2 - move to server folder, get changes from main and move to the given commit
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cd /opt/ci/deployments//*%= data.basicData.name.toLowerCase() %*//server && git checkout -- . && git checkout main && git pull && git reset --hard $CI_COMMIT_SHA"
    # 3 - move to deploy folder again and execute docker-compose only for the server
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cd /opt/ci/deployments//*%= data.basicData.name.toLowerCase() %*//deploy && docker-compose up -d server"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_TASK_NAME == "night-deploy"'
      when: always
    - if: '$CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: manual
    - when: never

stop_prod:
  stage: deploy
  environment:
    name: production
    action: stop
  image: "kroniak/ssh-client"
  before_script: []
  script:
    - chmod og= $SSH_PRIVATE_KEY
    - apk update && apk add openssh-client
    # 0 - stop server container
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop /*%= data.basicData.name.toLowerCase() %*/-server"
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: manual
    - when: never

generate_daily_log_file:
  stage: log
  image: "kroniak/ssh-client"
  before_script:
    - apk add coreutils
  script:
    - chmod og= $SSH_PRIVATE_KEY
    - apk update && apk add openssh-client
    # 0 - checks if directory "/home/$SERVER_USER/logs//*%= data.basicData.name.toLowerCase() %*/" exists and creates it if does not
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "(ls /home/ci/logs//*%= data.basicData.name.toLowerCase() %*// > /dev/null) || (mkdir -p /home/ci/logs//*%= data.basicData.name.toLowerCase() %*// && echo Directories created successfully)"
    # 1 - get logs from last day and save it in "/home/$SERVER_USER/logs//*%= data.basicData.name.toLowerCase() %*/" directory
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker logs /*%= data.basicData.name.toLowerCase() %*/-server --since $(date -u -d "yesterday 00:00" '+%s')  --until $(date -u -d "today 00:00" '+%s') > /home/$SERVER_USER/logs//*%= data.basicData.name.toLowerCase() %*//$(date -u -d "yesterday 00:00" '+%F_%H_%M').log"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_TASK_NAME == "log-file-generation"'
/*% } %*/
